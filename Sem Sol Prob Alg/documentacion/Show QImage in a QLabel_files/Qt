// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-1629739459234463496"},"updated":{"$t":"2016-07-09T19:33:21.949+03:00"},"category":[{"term":"Java"},{"term":"Algorithms"},{"term":"cplusplus"},{"term":"Qt"},{"term":"Recursion"},{"term":"Generics"},{"term":"Data Structures"},{"term":"Binary Tree"},{"term":"Binary search algorithm"},{"term":"QGraphicsScene"},{"term":"Ubuntu"},{"term":"Boost"},{"term":"Pointer"},{"term":"QGraphicsView"},{"term":"QDialog"},{"term":"QGraphicsItem"},{"term":"J2ME"},{"term":"PL\/SQL"},{"term":"QString"},{"term":"Serialization"},{"term":"Apache POI"},{"term":"Header Files"},{"term":"Maven2"},{"term":"PostgreSQL"},{"term":"QDataStream"},{"term":"QSqlDatabase"},{"term":"QSqlQuery"},{"term":"QtSql"},{"term":"RpcGen"},{"term":"Ruby"},{"term":"Ruby on Rails"},{"term":"Software Engineering"},{"term":"socket"},{"term":".Net Framework"},{"term":"C#"},{"term":"Commons Net FtpClient"},{"term":"Dictionary"},{"term":"Dynamic-link library"},{"term":"Enumeration"},{"term":"Exceptions"},{"term":"Hibernate"},{"term":"Junit"},{"term":"Logger"},{"term":"MySQL"},{"term":"QDebug"},{"term":"QDir"},{"term":"QFileDialog"},{"term":"QImage"},{"term":"QLayout"},{"term":"QLibrary"},{"term":"QMutex"},{"term":"QRegExp"},{"term":"QSqlError"},{"term":"QStringList"},{"term":"QTest"},{"term":"QVariant"},{"term":"QXMLStreamWriter"},{"term":"Regex"},{"term":"Run-time type information"},{"term":"Unicode"},{"term":"Visual Studio IDE"}],"title":{"type":"text","$t":"Tufan Görel"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/tufangorel.blogspot.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/-\/Qt?alt=json-in-script\u0026max-results=5"},{"rel":"alternate","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/search\/label\/Qt"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/-\/Qt\/-\/Qt?alt=json-in-script\u0026start-index=6\u0026max-results=5"}],"author":[{"name":{"$t":"Tufan Görel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/02308107478813024690"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"31","src":"http:\/\/1.bp.blogspot.com\/-8C4zN2V2Zoc\/VhgpZJnyTzI\/AAAAAAAAAdA\/dmkwYsYWV00\/s220\/profile_photo.jpg"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"22"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"5"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-1629739459234463496.post-1862553082856584901"},"published":{"$t":"2015-07-22T00:30:00.001+03:00"},"updated":{"$t":"2015-11-11T16:04:13.838+02:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"cplusplus"},{"scheme":"http://www.blogger.com/atom/ns#","term":"PostgreSQL"},{"scheme":"http://www.blogger.com/atom/ns#","term":"QSqlDatabase"},{"scheme":"http://www.blogger.com/atom/ns#","term":"QSqlQuery"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Qt"},{"scheme":"http://www.blogger.com/atom/ns#","term":"QtSql"}],"title":{"type":"text","$t":"Call Function From PostgreSQL with Qt SQL"},"content":{"type":"html","$t":"Qt SQL enables programmers to call written functions from PostgreSQL database. Example project contains following table and functions from PostgreSQL server.\u003Cbr \/\u003E\u003Cbr \/\u003EConfiguration required to run this application:\u003Cbr \/\u003E\u003Cbr \/\u003E1-)\u0026nbsp;\u003Ca href=\"http:\/\/www.postgresql.org\/\" target=\"_blank\"\u003EPostgreSQL\u003C\/a\u003E\u0026nbsp;9.4.4\u003Cbr \/\u003E2-) Qt Version 5.4.0\u003Cbr \/\u003E3-) Qt Creator 3.2.2\u003Cbr \/\u003E\u003Cbr \/\u003EPostgreSQL has got its own database programming language named with \u003Ca href=\"http:\/\/www.postgresql.org\/docs\/9.3\/static\/plpgsql.html\" target=\"_blank\"\u003EPL\/pgSQL\u003C\/a\u003E and following functions implemented in\u0026nbsp;PL\/pgSQL.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:sql\" name=\"code\"\u003E-- Table: person\u003Cbr \/\u003E\u003Cbr \/\u003E-- DROP TABLE person;\u003Cbr \/\u003E\u003Cbr \/\u003ECREATE TABLE person\u003Cbr \/\u003E(\u003Cbr \/\u003E  id integer NOT NULL,\u003Cbr \/\u003E  name text NOT NULL,\u003Cbr \/\u003E  age integer NOT NULL,\u003Cbr \/\u003E  address character(50),\u003Cbr \/\u003E  CONSTRAINT person_pkey PRIMARY KEY (id)\u003Cbr \/\u003E)\u003Cbr \/\u003EWITH (\u003Cbr \/\u003E  OIDS=FALSE\u003Cbr \/\u003E);\u003Cbr \/\u003EALTER TABLE person\u003Cbr \/\u003E  OWNER TO test;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003Eperson table is filled with the following sample records\/rows in order to see the execution result.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:sql\" name=\"code\"\u003EINSERT INTO person(\u003Cbr \/\u003E            id, name, age, address)\u003Cbr \/\u003E    VALUES (1, 'paul', 12, 'adana');\u003Cbr \/\u003E\u003Cbr \/\u003EINSERT INTO person(\u003Cbr \/\u003E            id, name, age, address)\u003Cbr \/\u003E    VALUES (2, 'tufan', 15, 'ankara');\u003Cbr \/\u003E\u003Cbr \/\u003EINSERT INTO person(\u003Cbr \/\u003E            id, name, age, address)\u003Cbr \/\u003E    VALUES (3, 'colin', 18, 'antep');\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EFirst PostgreSQL PL\/pgSQL function returns the max age from the person table. \u003Cbr \/\u003E\u003Cpre class=\"brush:sql\" name=\"code\"\u003ECREATE OR REPLACE FUNCTION maxAge()\u003Cbr \/\u003ERETURNS integer AS $$\u003Cbr \/\u003Edeclare\u003Cbr \/\u003E max_age integer;\u003Cbr \/\u003EBEGIN\u003Cbr \/\u003E   SELECT max(age) into max_age FROM person;\u003Cbr \/\u003E   RETURN max_age;\u003Cbr \/\u003EEND;\u003Cbr \/\u003E$$ LANGUAGE plpgsql;\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EmaxAge() plpgsql function called with a select statement from pgAdmin III Query Tool. \u003Cbr \/\u003E\u003Cpre class=\"brush:sql\" name=\"code\"\u003ESELECT maxage();\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EOutput of the call of the maxage() function from PostgreSQL database is \"18\". \u003Cbr \/\u003E\u003Cbr \/\u003ESecond PostgreSQL PL\/pgSQL function returns the age of the person whose name is sent as a parameter from the person table. \u003Cbr \/\u003E\u003Cpre class=\"brush:sql\" name=\"code\"\u003ECREATE OR REPLACE FUNCTION getAgeOfPersonByName( nameOfPerson text )\u003Cbr \/\u003ERETURNS integer AS $$\u003Cbr \/\u003Edeclare\u003Cbr \/\u003E person_age integer;\u003Cbr \/\u003EBEGIN\u003Cbr \/\u003E   SELECT age into person_age FROM person where name=nameOfPerson;\u003Cbr \/\u003E   RETURN person_age;\u003Cbr \/\u003EEND;\u003Cbr \/\u003E$$ LANGUAGE plpgsql;\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EgetAgeOfPersonByName( nameOfPerson text ) plpgsql function called with a select statement from pgAdmin III Query Tool. \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:sql\" name=\"code\"\u003ESELECT getAgeOfPersonByName('paul');\u003Cbr \/\u003E\u003C\/pre\u003EOutput of the call of the getAgeOfPersonByName('paul') function from PostgreSQL database is \"12\".\u003Cbr \/\u003E\u003Cbr \/\u003EAfter creating the required tables and functions in PostgreSQL, now it is time to write our Qt application that calls these PL\/pgSQL functions from PostgreSQL with Qt SQL.\u003Cbr \/\u003E\u003Cbr \/\u003EFollowing sample project created by qt creator and contains following files :\u003Cbr \/\u003E\u003Cbr \/\u003E1- QtSQLCallFunctionFromPostgreSQL.pro\u003Cbr \/\u003E2- main.cpp\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-_PSZNfgHkxw\/Va63qr_Au9I\/AAAAAAAAAUI\/pZ2CRGL4U04\/s1600\/desktop.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"89\" src=\"http:\/\/2.bp.blogspot.com\/-_PSZNfgHkxw\/Va63qr_Au9I\/AAAAAAAAAUI\/pZ2CRGL4U04\/s320\/desktop.png\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cb\u003EQtSQLCallFunctionFromPostgreSQL.pro\u003C\/b\u003E\u0026nbsp;file contains project configuration :\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003ETEMPLATE  = app\u003Cbr \/\u003ECONFIG   += console\u003Cbr \/\u003ECONFIG   -= app_bundle\u003Cbr \/\u003EQT       += core sql\u003Cbr \/\u003EQT       -= gui\u003Cbr \/\u003ETARGET = QtSQLCallFunctionFromPostgreSQL\u003Cbr \/\u003ESOURCES += main.cpp\u003Cbr \/\u003E\u003C\/pre\u003ESample project only contains main.cpp file as source file. maxAge and getAgeOfPersonByName PL\/pgSQL functions from PostgreSQL are called and return values are displayed in the terminal. \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#include \u0026lt;QCoreApplication\u0026gt;\u003Cbr \/\u003E#include \u0026lt;QtSql\u0026gt;\u003Cbr \/\u003E#include \u0026lt;QDebug\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003Eint main()\u003Cbr \/\u003E{\u003Cbr \/\u003E    const char* driverName = \"QPSQL\";\u003Cbr \/\u003E    QSqlDatabase db( QSqlDatabase::addDatabase(driverName) );\u003Cbr \/\u003E    db.setConnectOptions();\u003Cbr \/\u003E    db.setHostName(\"localhost\");\u003Cbr \/\u003E    db.setDatabaseName(\"testdb\");\u003Cbr \/\u003E    db.setUserName(\"test\");\u003Cbr \/\u003E    db.setPassword(\"test\");\u003Cbr \/\u003E\u003Cbr \/\u003E    db.open();\u003Cbr \/\u003E\u003Cbr \/\u003E    QString functionNameToCall = \"maxAge\";\u003Cbr \/\u003E    QSqlQuery* query = new QSqlQuery(db);\u003Cbr \/\u003E    query-\u0026gt;prepare(QString(\"SELECT %1()\").arg(functionNameToCall));\u003Cbr \/\u003E    query-\u0026gt;exec();\u003Cbr \/\u003E\u003Cbr \/\u003E    QString maxAgeOfPersonTable;\u003Cbr \/\u003E    while (query-\u0026gt;next())\u003Cbr \/\u003E    {\u003Cbr \/\u003E        maxAgeOfPersonTable = query-\u0026gt;value(0).toString();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    qDebug() \u0026lt;\u0026lt; maxAgeOfPersonTable;\u003Cbr \/\u003E\u003Cbr \/\u003E    functionNameToCall = \"getageofpersonbyname\";\u003Cbr \/\u003E    QString name = \"paul\";\u003Cbr \/\u003E    query-\u0026gt;prepare(QString(\"SELECT %1(?)\").arg(functionNameToCall));\u003Cbr \/\u003E    query-\u0026gt;addBindValue(name);\u003Cbr \/\u003E    query-\u0026gt;exec();\u003Cbr \/\u003E\u003Cbr \/\u003E    QString personAge;\u003Cbr \/\u003E    while (query-\u0026gt;next())\u003Cbr \/\u003E    {\u003Cbr \/\u003E        personAge = query-\u0026gt;value(0).toString();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    qDebug() \u0026lt;\u0026lt; personAge;\u003Cbr \/\u003E\u003Cbr \/\u003E    delete query;\u003Cbr \/\u003E    db.close();\u003Cbr \/\u003E\u003Cbr \/\u003E    return 0;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cbr \/\u003Egetageofpersonbyname PL\/pgSQL function takes a parameter and the parameter is binded by addBindValue function of QSqlQuery. When the Qt application runs in the terminal the following output is displayed. \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-1Sbgtbs1yh4\/Va6513JbJgI\/AAAAAAAAAUU\/XunLhv674lI\/s1600\/terminal.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-1Sbgtbs1yh4\/Va6513JbJgI\/AAAAAAAAAUU\/XunLhv674lI\/s1600\/terminal.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/tufangorel.blogspot.com\/feeds\/1862553082856584901\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/2015\/07\/call-function-from-postgresql-with-qt-sql.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/1862553082856584901"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/1862553082856584901"},{"rel":"alternate","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/2015\/07\/call-function-from-postgresql-with-qt-sql.html","title":"Call Function From PostgreSQL with Qt SQL"}],"author":[{"name":{"$t":"Tufan Görel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/02308107478813024690"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"31","src":"http:\/\/1.bp.blogspot.com\/-8C4zN2V2Zoc\/VhgpZJnyTzI\/AAAAAAAAAdA\/dmkwYsYWV00\/s220\/profile_photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-_PSZNfgHkxw\/Va63qr_Au9I\/AAAAAAAAAUI\/pZ2CRGL4U04\/s72-c\/desktop.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-1629739459234463496.post-2109660940308466613"},"published":{"$t":"2015-07-19T01:48:00.003+03:00"},"updated":{"$t":"2015-11-11T16:04:25.837+02:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"cplusplus"},{"scheme":"http://www.blogger.com/atom/ns#","term":"PostgreSQL"},{"scheme":"http://www.blogger.com/atom/ns#","term":"QSqlDatabase"},{"scheme":"http://www.blogger.com/atom/ns#","term":"QSqlError"},{"scheme":"http://www.blogger.com/atom/ns#","term":"QSqlQuery"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Qt"},{"scheme":"http://www.blogger.com/atom/ns#","term":"QtSql"}],"title":{"type":"text","$t":"Connect to PostgreSQL From Qt Application with Qt Sql"},"content":{"type":"html","$t":"Qt comes with \u003Ca href=\"http:\/\/doc.qt.io\/qt-5\/qtsql-index.html\" target=\"_blank\"\u003EQt Sql \u003C\/a\u003EAPIs in order to perform database related operations. Qt SQL's APIs consist of mainly three parts.\u003Cbr \/\u003E- Driver Layer\u003Cbr \/\u003E- SQL API Layer\u003Cbr \/\u003E- User Interface Layer\u003Cbr \/\u003E\u003Cbr \/\u003EIn order to connect to a database from Qt application, related database driver needs to be configured.\u003Cbr \/\u003EAfter setting connection to a specific database from Qt application, SQL API helps to achieve common database operations such as open-close connection, query tables, etc.\u003Cbr \/\u003E\u003Cbr \/\u003EConfiguration required to run this application:\u003Cbr \/\u003E\u003Cbr \/\u003E1-) \u003Ca href=\"http:\/\/www.postgresql.org\/\" target=\"_blank\"\u003EPostgreSQL\u003C\/a\u003E 9.4.4\u003Cbr \/\u003E2-) Qt Version 5.4.0\u003Cbr \/\u003E3-) Qt Creator 3.2.2\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003ECreate sql script for Person table: You can use \u003Ca href=\"http:\/\/www.pgadmin.org\/\" target=\"_blank\"\u003EpgAdmin\u003C\/a\u003E tools in order to create tables on postgreSQL database.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:sql\" name=\"code\"\u003E-- Table: person\u003Cbr \/\u003E\u003Cbr \/\u003E-- DROP TABLE person;\u003Cbr \/\u003E\u003Cbr \/\u003ECREATE TABLE person\u003Cbr \/\u003E(\u003Cbr \/\u003E  id integer NOT NULL,\u003Cbr \/\u003E  name text NOT NULL,\u003Cbr \/\u003E  age integer NOT NULL,\u003Cbr \/\u003E  address character(50),\u003Cbr \/\u003E  CONSTRAINT person_pkey PRIMARY KEY (id)\u003Cbr \/\u003E)\u003Cbr \/\u003EWITH (\u003Cbr \/\u003E  OIDS=FALSE\u003Cbr \/\u003E);\u003Cbr \/\u003EALTER TABLE person\u003Cbr \/\u003E  OWNER TO test;\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EFollowing sample project created by qt creator and contains following files :\u003Cbr \/\u003E\u003Cbr \/\u003E1- QSqlConnection.pro\u003Cbr \/\u003E2- QSQLDbHelper.h\u003Cbr \/\u003E3- QSQLDbHelper.cpp\u003Cbr \/\u003E4- main.cpp \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-fNPQiqEg0Mc\/VarO7U-1bwI\/AAAAAAAAATo\/sYz8VNWONAY\/s1600\/project.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-fNPQiqEg0Mc\/VarO7U-1bwI\/AAAAAAAAATo\/sYz8VNWONAY\/s1600\/project.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003Cb\u003EQSqlConnection.pro\u003C\/b\u003E\u0026nbsp;file contains project configuration :\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003ETEMPLATE  = app\u003Cbr \/\u003ECONFIG   += console\u003Cbr \/\u003ECONFIG   -= app_bundle\u003Cbr \/\u003EQT       += core sql\u003Cbr \/\u003EQT       -= gui\u003Cbr \/\u003ESOURCES  += main.cpp \\\u003Cbr \/\u003E    QSQLDbHelper.cpp\u003Cbr \/\u003E\u003Cbr \/\u003EHEADERS += \\\u003Cbr \/\u003E    QSQLDbHelper.h\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EIn this example qt sql project \u003Cb\u003EQSQLDbHelper.h\u003C\/b\u003E class header file contains database related functions.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#ifndef QSQLDBHELPER_H\u003Cbr \/\u003E#define QSQLDBHELPER_H\u003Cbr \/\u003E\u003Cbr \/\u003E#include \u0026lt;QtSql\u0026gt;\u003Cbr \/\u003E#include \u0026lt;QString\u0026gt;\u003Cbr \/\u003E#include \u0026lt;QDebug\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003Eclass QSQLDbHelper\u003Cbr \/\u003E{\u003Cbr \/\u003Epublic:\u003Cbr \/\u003E    QSQLDbHelper(const char* driver);\u003Cbr \/\u003E    ~QSQLDbHelper();\u003Cbr \/\u003E    QSqlDatabase* connect( const QString\u0026amp; server,\u003Cbr \/\u003E                           const QString\u0026amp; databaseName,\u003Cbr \/\u003E                           const QString\u0026amp; userName,\u003Cbr \/\u003E                           const QString\u0026amp; password );\u003Cbr \/\u003E    void disConnect();\u003Cbr \/\u003E\u003Cbr \/\u003E    int selectRowCountResult(QSqlQuery* query);\u003Cbr \/\u003E    bool executeInsert(QSqlQuery* query);\u003Cbr \/\u003E    bool executeUpdate(QSqlQuery* query);\u003Cbr \/\u003E    bool executeDelete(QSqlQuery* query);\u003Cbr \/\u003E\u003Cbr \/\u003Eprivate:\u003Cbr \/\u003E    QSqlDatabase* db;\u003Cbr \/\u003E};\u003Cbr \/\u003E\u003Cbr \/\u003E#endif \/\/ QSQLDBHELPER_H\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cb\u003EQSQLDbHelper.cpp \u003C\/b\u003Efile contains implementation details for the following functions :\u003Cbr \/\u003E\u003Cbr \/\u003E1- Class constructor\/desctructor\u003Cbr \/\u003E2- Db connect\u003Cbr \/\u003E3- Db disconnect\u003Cbr \/\u003E4- selectRowCount\u003Cbr \/\u003E5- insert operation\u003Cbr \/\u003E6- update operation\u003Cbr \/\u003E7- delete operation\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#include \"QSQLDbHelper.h\"\u003Cbr \/\u003E\u003Cbr \/\u003EQSQLDbHelper::QSQLDbHelper(const char* driver)\u003Cbr \/\u003E{\u003Cbr \/\u003E    db = new QSqlDatabase( QSqlDatabase::addDatabase(driver) );\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003EQSQLDbHelper::~QSQLDbHelper()\u003Cbr \/\u003E{\u003Cbr \/\u003E    qDebug() \u0026lt;\u0026lt; \"Called Destructor!\";\u003Cbr \/\u003E    delete db;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003EQSqlDatabase* QSQLDbHelper::connect( const QString\u0026amp; server,\u003Cbr \/\u003E                                     const QString\u0026amp; databaseName,\u003Cbr \/\u003E                                     const QString\u0026amp; userName,\u003Cbr \/\u003E                                     const QString\u0026amp; password )\u003Cbr \/\u003E{\u003Cbr \/\u003E    db-\u0026gt;setConnectOptions();\u003Cbr \/\u003E    db-\u0026gt;setHostName(server);\u003Cbr \/\u003E    db-\u0026gt;setDatabaseName(databaseName);\u003Cbr \/\u003E    db-\u0026gt;setUserName(userName);\u003Cbr \/\u003E    db-\u0026gt;setPassword(password);\u003Cbr \/\u003E\u003Cbr \/\u003E    if(db-\u0026gt;open()) {\u003Cbr \/\u003E        return db;\u003Cbr \/\u003E    }\u003Cbr \/\u003E    else {\u003Cbr \/\u003E        return NULL;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Eint QSQLDbHelper::selectRowCountResult(QSqlQuery* query)\u003Cbr \/\u003E{\u003Cbr \/\u003E    bool queryRes = query-\u0026gt;exec();\u003Cbr \/\u003E    if (query-\u0026gt;lastError().type() != QSqlError::NoError || !queryRes)\u003Cbr \/\u003E    {\u003Cbr \/\u003E        qDebug() \u0026lt;\u0026lt; query-\u0026gt;lastError().text();\u003Cbr \/\u003E        return -1;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    int recordCount = 0;\u003Cbr \/\u003E    while (query-\u0026gt;next())\u003Cbr \/\u003E    {\u003Cbr \/\u003E        qDebug() \u0026lt;\u0026lt; \"Field 1 : \" \u0026lt;\u0026lt; query-\u0026gt;value(0).toString() \u003Cbr \/\u003E                 \u0026lt;\u0026lt; \"Field 2 : \" \u0026lt;\u0026lt; query-\u0026gt;value(1).toString();\u003Cbr \/\u003E        ++recordCount;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    return recordCount;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Ebool QSQLDbHelper::executeInsert(QSqlQuery* query)\u003Cbr \/\u003E{\u003Cbr \/\u003E    db-\u0026gt;transaction();\u003Cbr \/\u003E    bool queryRes = query-\u0026gt;exec();\u003Cbr \/\u003E    if (query-\u0026gt;lastError().type() != QSqlError::NoError || !queryRes)\u003Cbr \/\u003E    {\u003Cbr \/\u003E        qDebug() \u0026lt;\u0026lt; query-\u0026gt;lastError().text();\u003Cbr \/\u003E        db-\u0026gt;rollback();\u003Cbr \/\u003E        return false;\u003Cbr \/\u003E    }\u003Cbr \/\u003E    db-\u0026gt;commit();\u003Cbr \/\u003E    return true;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Ebool QSQLDbHelper::executeUpdate(QSqlQuery* query)\u003Cbr \/\u003E{\u003Cbr \/\u003E    db-\u0026gt;transaction();\u003Cbr \/\u003E    bool queryRes = query-\u0026gt;exec();\u003Cbr \/\u003E    if (query-\u0026gt;lastError().type() != QSqlError::NoError || !queryRes)\u003Cbr \/\u003E    {\u003Cbr \/\u003E        qDebug() \u0026lt;\u0026lt; query-\u0026gt;lastError().text();\u003Cbr \/\u003E        db-\u0026gt;rollback();\u003Cbr \/\u003E        return false;\u003Cbr \/\u003E    }\u003Cbr \/\u003E    db-\u0026gt;commit();\u003Cbr \/\u003E    return true;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Ebool QSQLDbHelper::executeDelete(QSqlQuery* query)\u003Cbr \/\u003E{\u003Cbr \/\u003E    db-\u0026gt;transaction();\u003Cbr \/\u003E    bool queryRes = query-\u0026gt;exec();\u003Cbr \/\u003E    if (query-\u0026gt;lastError().type() != QSqlError::NoError || !queryRes)\u003Cbr \/\u003E    {\u003Cbr \/\u003E        qDebug() \u0026lt;\u0026lt; query-\u0026gt;lastError().text();\u003Cbr \/\u003E        db-\u0026gt;rollback();\u003Cbr \/\u003E        return false;\u003Cbr \/\u003E    }\u003Cbr \/\u003E    db-\u0026gt;commit();\u003Cbr \/\u003E    return true;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Evoid QSQLDbHelper::disConnect()\u003Cbr \/\u003E{\u003Cbr \/\u003E    qDebug() \u0026lt;\u0026lt; \"Disconnected From Database!\";\u003Cbr \/\u003E    db-\u0026gt;close();\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"font-family: inherit;\"\u003EIn order to make database related operations from a qt application it is required to include \"\u003Cspan style=\"color: green;\"\u003EQtSql\u003C\/span\u003E\" header file into the related source file.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cspan style=\"color: purple;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cspan style=\"color: purple;\"\u003E\u003Ca href=\"http:\/\/doc.qt.io\/qt-5\/qsqldatabase.html\" target=\"_blank\"\u003EQSqlDatabase\u003C\/a\u003E \u003C\/span\u003Eclass represents a database in your application. A transaction is started and concluded by using rollback() and commit() functions of \u003Cspan style=\"color: purple;\"\u003EQSqlDatabase.\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cspan style=\"color: purple;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/span\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cspan style=\"color: purple;\"\u003E\u003Ca href=\"http:\/\/doc.qt.io\/qt-5\/qsqlquery.html\" target=\"_blank\"\u003EQSqlQuery\u003C\/a\u003E \u003C\/span\u003Eclass executes passed sql queries on postgresql database.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"font-family: inherit;\"\u003EMain method in the \u003Cb\u003Emain.cpp\u003C\/b\u003E file calls implemented connect, disconnect and CRUD operation methods from QSQLDbHelper class.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#include \u0026lt;iostream\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E#include \u0026lt;QDebug\u0026gt;\u003Cbr \/\u003E#include \"QSQLDbHelper.h\"\u003Cbr \/\u003E\u003Cbr \/\u003Eint main()\u003Cbr \/\u003E{\u003Cbr \/\u003E    qDebug() \u0026lt;\u0026lt; \"Compiled with Qt Version = \" \u0026lt;\u0026lt; QT_VERSION_STR;\u003Cbr \/\u003E\u003Cbr \/\u003E    const char* driverName = \"QPSQL\";\u003Cbr \/\u003E    QSQLDbHelper* qSQLDbHelper = new QSQLDbHelper(driverName);\u003Cbr \/\u003E    QSqlDatabase* db = qSQLDbHelper-\u0026gt;connect(\"localhost\", \"testdb\", \"test\", \"test\");\u003Cbr \/\u003E\u003Cbr \/\u003E    if(db-\u0026gt;open()) {\u003Cbr \/\u003E\u003Cbr \/\u003E        QSqlQuery* query = new QSqlQuery(*db);\u003Cbr \/\u003E        query-\u0026gt;setForwardOnly(true);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Select empty person table\u003Cbr \/\u003E        QString name = \"Paul\";\u003Cbr \/\u003E        if( !query-\u0026gt;prepare(QString(\"SELECT id, name from person where name = ? \")) )\u003Cbr \/\u003E        {\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt;\"Error = \" \u0026lt;\u0026lt; db-\u0026gt;lastError().text();\u003Cbr \/\u003E            return -1;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        else\u003Cbr \/\u003E            query-\u0026gt;addBindValue(name);\u003Cbr \/\u003E\u003Cbr \/\u003E        int queryResultRowCount = qSQLDbHelper-\u0026gt;selectRowCountResult(query);\u003Cbr \/\u003E        qDebug() \u0026lt;\u0026lt; \"Initial Row Count = \" \u0026lt;\u0026lt; queryResultRowCount \u0026lt;\u0026lt; \"\\n\";\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ insert into empty person table\u003Cbr \/\u003E        QString id = \"1\";\u003Cbr \/\u003E        QString age = \"34\";\u003Cbr \/\u003E        QString address = \"istanbul\";\u003Cbr \/\u003E        if( !query-\u0026gt;prepare(\u003Cbr \/\u003E        QString(\"INSERT INTO person( id, name, age, address) VALUES ( ?, ?, ?, ?)\") ))\u003Cbr \/\u003E        {\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt;\"Error = \" \u0026lt;\u0026lt; db-\u0026gt;lastError().text();\u003Cbr \/\u003E            return -1;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        else\u003Cbr \/\u003E        {\u003Cbr \/\u003E            query-\u0026gt;addBindValue(id);\u003Cbr \/\u003E            query-\u0026gt;addBindValue(name);\u003Cbr \/\u003E            query-\u0026gt;addBindValue(age);\u003Cbr \/\u003E            query-\u0026gt;addBindValue(address);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        bool result = qSQLDbHelper-\u0026gt;executeInsert(query);\u003Cbr \/\u003E        if( result )\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt; \"Successful insert\";\u003Cbr \/\u003E        else\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt; \"Insert failed\";\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Select person table with 1 matching record\u003Cbr \/\u003E        if( !query-\u0026gt;prepare(\u003Cbr \/\u003E        QString(\"SELECT id, name from person where name = ? \")))\u003Cbr \/\u003E        {\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt;\"Error = \" \u0026lt;\u0026lt; db-\u0026gt;lastError().text();\u003Cbr \/\u003E            return -1;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        else\u003Cbr \/\u003E            query-\u0026gt;addBindValue(name);\u003Cbr \/\u003E\u003Cbr \/\u003E        queryResultRowCount = qSQLDbHelper-\u0026gt;selectRowCountResult(query);\u003Cbr \/\u003E        qDebug() \u0026lt;\u0026lt; \"After Insert Row Count = \" \u0026lt;\u0026lt; queryResultRowCount \u0026lt;\u0026lt; \"\\n\";\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Update person table\u003Cbr \/\u003E        name = \"Paul2\";\u003Cbr \/\u003E        if( !query-\u0026gt;prepare(QString(\"UPDATE person set name=? where id =? \")) )\u003Cbr \/\u003E        {\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt;\"Error = \" \u0026lt;\u0026lt; db-\u0026gt;lastError().text();\u003Cbr \/\u003E            return -1;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        else\u003Cbr \/\u003E        {\u003Cbr \/\u003E            query-\u0026gt;addBindValue(name);\u003Cbr \/\u003E            query-\u0026gt;addBindValue(id);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        result = qSQLDbHelper-\u0026gt;executeUpdate(query);\u003Cbr \/\u003E        if( result )\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt; \"Successful update\";\u003Cbr \/\u003E        else\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt; \"Update failed\";\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Select person table with 0 no matching record\u003Cbr \/\u003E        if( !query-\u0026gt;prepare(\u003Cbr \/\u003E        QString(\"SELECT id, name from person where name = ?\")) )\u003Cbr \/\u003E        {\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt;\"Error = \" \u0026lt;\u0026lt; query-\u0026gt;lastError().text();\u003Cbr \/\u003E            return -1;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        else\u003Cbr \/\u003E        {\u003Cbr \/\u003E            query-\u0026gt;addBindValue(name);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        queryResultRowCount = qSQLDbHelper-\u0026gt;selectRowCountResult(query);\u003Cbr \/\u003E        qDebug() \u0026lt;\u0026lt; \"After Update Row Count = \" \u0026lt;\u0026lt; queryResultRowCount \u0026lt;\u0026lt; \"\\n\";\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Delete from person table whose name is Paul2\u003Cbr \/\u003E        \/\/ name = \"Paul2\";\u003Cbr \/\u003E        if( !query-\u0026gt;prepare(QString(\"Delete from person where name =? \")) )\u003Cbr \/\u003E        {\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt; \"Error = \" \u0026lt;\u0026lt; db-\u0026gt;lastError().text();\u003Cbr \/\u003E            return -1;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        else\u003Cbr \/\u003E        {\u003Cbr \/\u003E            query-\u0026gt;addBindValue(name);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        result = qSQLDbHelper-\u0026gt;executeDelete(query);\u003Cbr \/\u003E        if( result )\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt; \"Successful delete\";\u003Cbr \/\u003E        else\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt; \"Delete failed\";\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Select person table with 0 no matching record\u003Cbr \/\u003E        if( !query-\u0026gt;prepare(\u003Cbr \/\u003E        QString(\"SELECT id, name from person where name = ? \")) )\u003Cbr \/\u003E        {\u003Cbr \/\u003E            qDebug() \u0026lt;\u0026lt; \"Error = \" \u0026lt;\u0026lt; db-\u0026gt;lastError().text();\u003Cbr \/\u003E            return -1;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        else\u003Cbr \/\u003E        {\u003Cbr \/\u003E            query-\u0026gt;addBindValue(name);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        queryResultRowCount = qSQLDbHelper-\u0026gt;selectRowCountResult(query);\u003Cbr \/\u003E        qDebug() \u0026lt;\u0026lt; \"After Delete Row Count = \" \u0026lt;\u0026lt; queryResultRowCount \u0026lt;\u0026lt; \"\\n\";\u003Cbr \/\u003E\u003Cbr \/\u003E        delete query;\u003Cbr \/\u003E    }\u003Cbr \/\u003E    else {\u003Cbr \/\u003E        qDebug() \u0026lt;\u0026lt; \"Something went Wrong:\" \u0026lt;\u0026lt; db-\u0026gt;lastError().text();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    qSQLDbHelper-\u0026gt;disConnect();\u003Cbr \/\u003E    delete qSQLDbHelper;\u003Cbr \/\u003E\u003Cbr \/\u003E    return 0;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EIn main function database connection is established and related database related operations are being tested.  Parametric, dynamic sql queries created by using addBindValue method of QSqlQuery.\u003Cbr \/\u003E\u003Cbr \/\u003EOutput of the execution of this program shows database operation results from Qt application in terminal.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-fDwK7Ge3GWw\/VarXpslnnKI\/AAAAAAAAAT4\/kdQO5tb-TiU\/s1600\/result.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/3.bp.blogspot.com\/-fDwK7Ge3GWw\/VarXpslnnKI\/AAAAAAAAAT4\/kdQO5tb-TiU\/s1600\/result.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/tufangorel.blogspot.com\/feeds\/2109660940308466613\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/2015\/07\/connect-to-postgresql-from-qt-application-with-qtsql.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/2109660940308466613"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/2109660940308466613"},{"rel":"alternate","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/2015\/07\/connect-to-postgresql-from-qt-application-with-qtsql.html","title":"Connect to PostgreSQL From Qt Application with Qt Sql"}],"author":[{"name":{"$t":"Tufan Görel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/02308107478813024690"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"31","src":"http:\/\/1.bp.blogspot.com\/-8C4zN2V2Zoc\/VhgpZJnyTzI\/AAAAAAAAAdA\/dmkwYsYWV00\/s220\/profile_photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-fNPQiqEg0Mc\/VarO7U-1bwI\/AAAAAAAAATo\/sYz8VNWONAY\/s72-c\/project.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-1629739459234463496.post-278289483265431146"},"published":{"$t":"2015-06-16T13:03:00.002+03:00"},"updated":{"$t":"2015-11-11T16:04:37.371+02:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Boost"},{"scheme":"http://www.blogger.com/atom/ns#","term":"cplusplus"},{"scheme":"http://www.blogger.com/atom/ns#","term":"QMutex"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Qt"}],"title":{"type":"text","$t":"Thread Safe Singleton XMLReader with QMutex and boost property tree "},"content":{"type":"html","$t":"\u003Ca class=\"zem_slink\" href=\"http:\/\/en.wikipedia.org\/wiki\/Singleton_pattern\" rel=\"wikipedia\" target=\"_blank\" title=\"Singleton pattern\"\u003ESingleton\u003C\/a\u003E design pattern is used widely when only one instance of an object needs to be created in the application domain. In order to achieve secure creation of singleton instance in multithreaded environments, locking mechanism must be taken into consideration to provide \u003Ca class=\"zem_slink\" href=\"http:\/\/en.wikipedia.org\/wiki\/Thread_safety\" rel=\"wikipedia\" target=\"_blank\" title=\"Thread safety\"\u003Ethread safety\u003C\/a\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003EXML configuration settings file access can be handled by creating a thread-safe singleton XMLParser class. \u003Ca href=\"http:\/\/www.boost.org\/\" target=\"_blank\"\u003EBoost library\u003C\/a\u003E has got a Property Tree library,\u0026nbsp;\u003Ca href=\"http:\/\/www.boost.org\/doc\/libs\/1_58_0\/doc\/html\/property_tree.html\" target=\"_blank\"\u003Eboost::property_tree\u003C\/a\u003E\u0026nbsp;, which\u0026nbsp;populates a \u003Ca class=\"zem_slink\" href=\"http:\/\/en.wikipedia.org\/wiki\/Tree_%28data_structure%29\" rel=\"wikipedia\" target=\"_blank\" title=\"Tree (data structure)\"\u003Etree data structure\u003C\/a\u003E that is representing the existing XML file content.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/www.boost.org\/doc\/libs\/1_58_0\/doc\/html\/property_tree.html\" target=\"_blank\"\u003Eboost::property_tree\u003C\/a\u003E\u0026nbsp;makes it easy to load an existing XML file into application. In order to provide thread safety for singleton XMLParser ,\u0026nbsp;\u003Ca href=\"http:\/\/www.qt.io\/\" target=\"_blank\"\u003EQT\u003C\/a\u003E application development framework supplied\u0026nbsp;\u003Ca href=\"http:\/\/doc.qt.io\/qt-5\/qmutex.html\" target=\"_blank\"\u003EQMutex\u003C\/a\u003E class can be used.\u003Cbr \/\u003E\u003Cbr \/\u003EFollowing sample project created by qt creator and contains following files :\u003Cbr \/\u003E\u003Cbr \/\u003E1-SingletonXMLParser.pro\u003Cbr \/\u003E2-XmlParser.h\u003Cbr \/\u003E3-XmlParser.cpp\u003Cbr \/\u003E4-main.cpp\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-FZMfBsXTFwU\/VX_rJpvUDqI\/AAAAAAAAASI\/LTwtS7AEraY\/s1600\/project_structure.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-FZMfBsXTFwU\/VX_rJpvUDqI\/AAAAAAAAASI\/LTwtS7AEraY\/s1600\/project_structure.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003ESingletonXMLParser.pro\u003C\/b\u003E file contains project configuration :\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003EQT       += core\u003Cbr \/\u003ETARGET    = SingletonXMLParser\u003Cbr \/\u003ECONFIG   += console\u003Cbr \/\u003ECONFIG   -= app_bundle\u003Cbr \/\u003ETEMPLATE  = app\u003Cbr \/\u003ESOURCES  += main.cpp \\\u003Cbr \/\u003E            XmlParser.cpp\u003Cbr \/\u003EHEADERS  += XmlParser.h\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EIn this example project, XMLParser.h header file contains the Settings struct which is going to hold data loaded from XML file. Also the name of the XML file is declared in the header file with a #define directive.\u003Cbr \/\u003E\u003Cbr \/\u003ERequirements to make XMLParser class a Thread-Safe Singleton is handled by\u003Cbr \/\u003E\u003Cbr \/\u003E1- Making constructor private\u003Cbr \/\u003E2- Adding a static XMLParser variable\u003Cbr \/\u003E3- Static Instance creator method\u003Cbr \/\u003E4- QMutex variable for locking\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EExample \u003Cb\u003EConfSettings.xml\u003C\/b\u003E file contains following data and placed under an accessible folder :\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-8wHc5w_9dVE\/VX_wt9v2U0I\/AAAAAAAAASY\/z_jicQvWJxM\/s1600\/conf_settings_xml_file.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"95\" src=\"http:\/\/1.bp.blogspot.com\/-8wHc5w_9dVE\/VX_wt9v2U0I\/AAAAAAAAASY\/z_jicQvWJxM\/s320\/conf_settings_xml_file.png\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#ifndef XMLPARSER_H\u003Cbr \/\u003E#define XMLPARSER_H\u003Cbr \/\u003E\u003Cbr \/\u003E#define CONF_SETTINGS_FILE \"ConfSettings.xml\"\u003Cbr \/\u003E\u003Cbr \/\u003E#include \u0026lt;boost\/property_tree\/ptree.hpp\u0026gt;\u003Cbr \/\u003E#include \u0026lt;boost\/property_tree\/xml_parser.hpp\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E#include \u0026lt;QMutex\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003Estruct Settings\u003Cbr \/\u003E{\u003Cbr \/\u003E    std::string ipAddress;\u003Cbr \/\u003E    std::string userName;\u003Cbr \/\u003E};\u003Cbr \/\u003E\u003Cbr \/\u003Eclass XMLParser\u003Cbr \/\u003E{\u003Cbr \/\u003Epublic:\u003Cbr \/\u003E    static XMLParser\u0026amp; instance();\u003Cbr \/\u003E    ~XMLParser();\u003Cbr \/\u003E    Settings getSettings();\u003Cbr \/\u003E\u003Cbr \/\u003Eprivate:\u003Cbr \/\u003E    XMLParser();\u003Cbr \/\u003E    Settings configSettings;\u003Cbr \/\u003E    static std::auto_ptr\u0026lt;XMLParser\u0026gt; mInstance;\u003Cbr \/\u003E    static QMutex mMutex;\u003Cbr \/\u003E};\u003Cbr \/\u003E\u003Cbr \/\u003E#endif \/\/ XMLPARSER_H\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003Cb\u003EXMLParser.cpp\u003C\/b\u003E file contains implementation details for\u003Cbr \/\u003E\u003Cbr \/\u003E1- private constructor\u003Cbr \/\u003E2- static instance creator method\u003Cbr \/\u003E3- static variables\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#include \"XmlParser.h\"\u003Cbr \/\u003E\u003Cbr \/\u003Estd::auto_ptr\u0026lt;XMLParser\u0026gt; XMLParser::mInstance;\u003Cbr \/\u003EQMutex XMLParser::mMutex(QMutex::Recursive);\u003Cbr \/\u003E\u003Cbr \/\u003EXMLParser::XMLParser()\u003Cbr \/\u003E{\u003Cbr \/\u003E    boost::property_tree::ptree config;\u003Cbr \/\u003E    read_xml(CONF_SETTINGS_FILE, config);\u003Cbr \/\u003E\u003Cbr \/\u003E    configSettings.ipAddress = config.get\u0026lt;std::string\u0026gt;(\"ftp.ipAddress\");\u003Cbr \/\u003E    configSettings.userName = config.get\u0026lt;std::string\u0026gt;(\"ftp.userName\");\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003EXMLParser::~XMLParser()\u003Cbr \/\u003E{\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003EXMLParser\u0026amp; XMLParser::instance()\u003Cbr \/\u003E{\u003Cbr \/\u003E    mMutex.lock();\u003Cbr \/\u003E    if (mInstance.get() == 0)\u003Cbr \/\u003E    {\u003Cbr \/\u003E        try\u003Cbr \/\u003E        {\u003Cbr \/\u003E            mInstance.reset(new XMLParser);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        catch (std::bad_alloc\u0026amp;)\u003Cbr \/\u003E        {\u003Cbr \/\u003E            throw;\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E    mMutex.unlock();\u003Cbr \/\u003E    return *mInstance;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003ESettings XMLParser::getSettings()\u003Cbr \/\u003E{\u003Cbr \/\u003E    return configSettings;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EIn the constructor of the XMLParser class CONF_SETTINGS_FILE is loaded into boost::property_tree::ptree type config variable. Then by applying the get method of boost::property_tree::ptree required elements from the XML document are retrieved into the application.\u003Cbr \/\u003E\u003Cbr \/\u003EStatic instance() method of XMLParser provides thread safety by calling lock() and unlock() methods of QMutex instance.\u003Cbr \/\u003E\u003Cbr \/\u003EMain method in the \u003Cb\u003Emain.cpp\u003C\/b\u003E file calls the static instance() method of thread-safe singleton XMLParser class and then loads the config settings into to Settings struct.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#include \"XmlParser.h\"\u003Cbr \/\u003E\u003Cbr \/\u003Eint main()\u003Cbr \/\u003E{\u003Cbr \/\u003E    Settings confSettings = XMLParser::instance().getSettings();\u003Cbr \/\u003E\u003Cbr \/\u003E    std::cout \u0026lt;\u0026lt; confSettings.ipAddress \u0026lt;\u0026lt; std::endl;\u003Cbr \/\u003E    std::cout \u0026lt;\u0026lt; confSettings.userName \u0026lt;\u0026lt; std::endl;\u003Cbr \/\u003E\u003Cbr \/\u003E    return 0;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003EOutput of the execution of this program shows ipAddress and userName element values from\u0026nbsp;ConfSettings.xml file on the terminal.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-804wuc31wRM\/VX_0U9XHBiI\/AAAAAAAAASk\/nNt03kzJEGE\/s1600\/console_output.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-804wuc31wRM\/VX_0U9XHBiI\/AAAAAAAAASk\/nNt03kzJEGE\/s1600\/console_output.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/tufangorel.blogspot.com\/feeds\/278289483265431146\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/2015\/06\/thread-safe-singleton-xmlreader-with-qmutex-and-boost-property-tree.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/278289483265431146"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/278289483265431146"},{"rel":"alternate","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/2015\/06\/thread-safe-singleton-xmlreader-with-qmutex-and-boost-property-tree.html","title":"Thread Safe Singleton XMLReader with QMutex and boost property tree "}],"author":[{"name":{"$t":"Tufan Görel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/02308107478813024690"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"31","src":"http:\/\/1.bp.blogspot.com\/-8C4zN2V2Zoc\/VhgpZJnyTzI\/AAAAAAAAAdA\/dmkwYsYWV00\/s220\/profile_photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/2.bp.blogspot.com\/-FZMfBsXTFwU\/VX_rJpvUDqI\/AAAAAAAAASI\/LTwtS7AEraY\/s72-c\/project_structure.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-1629739459234463496.post-5201480756921000461"},"published":{"$t":"2015-03-28T00:12:00.002+02:00"},"updated":{"$t":"2015-11-11T16:04:47.894+02:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Boost"},{"scheme":"http://www.blogger.com/atom/ns#","term":"cplusplus"},{"scheme":"http://www.blogger.com/atom/ns#","term":"QString"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Qt"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Serialization"}],"title":{"type":"text","$t":"Serialize C++ Object with QString Instance Variables"},"content":{"type":"html","$t":"boost::serialization library can be used to serialize and deserialize the state of QString variables in a \u003Ca class=\"zem_slink\" href=\"http:\/\/isocpp.org\/\" rel=\"homepage\" target=\"_blank\" title=\"C++\"\u003EC++ program\u003C\/a\u003E.\u003Cbr \/\u003EBy default boost::serialization library can not serialize a directly given QString variable, so you need an extra Serializer implementation for your serialization and deserialization requirements.\u003Cbr \/\u003E\u003Cbr \/\u003EWhen you try to serialize a QString variable directly by using boost::serialization library, compiler gives errors about missing serialize method as follows :\u003Cbr \/\u003E\u003Cbr \/\u003Eerror: 'class QString' has no member named 'serialize' \u003Cbr \/\u003E\u003Cbr \/\u003EIn order to use \u003Ca href=\"http:\/\/www.boost.org\/doc\/libs\/1_57_0\/libs\/serialization\/doc\/index.html\" target=\"_blank\"\u003Eboost::serialization library\u003C\/a\u003E in your applications, it is required to have libboost-all-dev library on your OS which contains libboost-serialization-dev. Following terminal command installs required boost libraries on linux OS : \u003Cbr \/\u003E\u003Cbr \/\u003E$ sudo apt-get install libboost-all-dev \u003Cbr \/\u003E\u003Cbr \/\u003EAfter installing boost serialization library, you can start including related header files into your application.\u003Cbr \/\u003E\u003Cbr \/\u003EFollowing sample project created by qt creator and contains following files : \u003Cbr \/\u003E\u003Cbr \/\u003E1-BoostSerializeQString.pro\u003Cbr \/\u003E2-QStringSerializer.h\u003Cbr \/\u003E3-User.h\u003Cbr \/\u003E4-main.cpp\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-5D-QjIzMy3I\/VRXOvPgO2fI\/AAAAAAAAARQ\/ohAJxOHRdQA\/s1600\/project.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/1.bp.blogspot.com\/-5D-QjIzMy3I\/VRXOvPgO2fI\/AAAAAAAAARQ\/ohAJxOHRdQA\/s1600\/project.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb\u003EBoostSerializeQString.pro\u003C\/b\u003E file contains project configuration. \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003EQT       += core\u003Cbr \/\u003ETARGET    = BoostSerializeQString\u003Cbr \/\u003ECONFIG   += console\u003Cbr \/\u003ECONFIG   -= app_bundle\u003Cbr \/\u003ETEMPLATE  = app\u003Cbr \/\u003ELIBS     += -lboost_serialization\u003Cbr \/\u003E\u003Cbr \/\u003ESOURCES  += main.cpp\u003Cbr \/\u003E\u003Cbr \/\u003EHEADERS  += QStringSerializer.h \\\u003Cbr \/\u003E            User.h\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/www.boost.org\/doc\/libs\/1_57_0\/libs\/serialization\/doc\/index.html\" target=\"_blank\"\u003Eboost_serialization library\u003C\/a\u003E is included into this Qt Project by adding \"LIBS     += -lboost_serialization\" line. \u003Cbr \/\u003EIn this example \u003Cb\u003EUser class\u003C\/b\u003E contains two QString instance variables to serialize and deserialize. When saving and loading User class it is required to save and load QString variable state properly. Also, User class has an intrusive serialize function. For User class case, the serialize function is implemented as a member of the class. \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#ifndef USER_H\u003Cbr \/\u003E#define USER_H\u003Cbr \/\u003E\u003Cbr \/\u003Eclass User\u003Cbr \/\u003E{\u003Cbr \/\u003Epublic:\u003Cbr \/\u003E\u003Cbr \/\u003E    User() {}\u003Cbr \/\u003E\u003Cbr \/\u003E    User(const QString \u0026amp;name, const QString \u0026amp;surname)\u003Cbr \/\u003E    {\u003Cbr \/\u003E        this-\u0026gt;name = name;\u003Cbr \/\u003E        this-\u0026gt;surname = surname;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    QString getName() { return name; }\u003Cbr \/\u003E    QString getSurname() { return surname; }\u003Cbr \/\u003E\u003Cbr \/\u003Eprivate:\u003Cbr \/\u003E    QString name;\u003Cbr \/\u003E    QString surname;\u003Cbr \/\u003E\u003Cbr \/\u003E    friend class boost::serialization::access;\u003Cbr \/\u003E    template\u0026lt;class Archive\u0026gt;\u003Cbr \/\u003E    void serialize(Archive \u0026amp; ar, const unsigned int version)\u003Cbr \/\u003E    {\u003Cbr \/\u003E        \/\/ serialize deserialize QString instance variables\u003Cbr \/\u003E        ar \u0026amp; BOOST_SERIALIZATION_NVP(name);\u003Cbr \/\u003E        ar \u0026amp; BOOST_SERIALIZATION_NVP(surname);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E};\u003Cbr \/\u003E\u003Cbr \/\u003E#endif \/\/ USER_H\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cb\u003EQStringSerializer.h \u003C\/b\u003Efile contains save and load functions which are going to be invoked during serialization and deserialization process of QString instance variables. \u003Cbr \/\u003E\u003Cbr \/\u003EBy declaring \u003Ca href=\"http:\/\/www.boost.org\/doc\/libs\/1_57_0\/libs\/serialization\/doc\/serialization.html\" target=\"_blank\"\u003Enon-intrusive serialization\u003C\/a\u003E mechanism we were able to implement serialization for QString without changing its original class definition. \u003Cbr \/\u003E\u003Cbr \/\u003Eboost::serialization is able to work on std::string type correctly, so it is required to retrieve std::string value of QString for serialization. And also for the reverse operation it is required to construct QString from loaded std::string value.  \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca href=\"http:\/\/doc.qt.io\/qt-5\/QString.html\" target=\"_blank\"\u003EQString\u003C\/a\u003E has got both toStdString and fromStdString functions to achieve these requirements. \u003Cbr \/\u003E\u003Cbr \/\u003EInside serialize and deserialize functions different statements are executed so it is required to implement save and load functions separately. \u003Cbr \/\u003E\u003Cbr \/\u003EDepending on the type of the archieve used for saving or loading current QString variable, save or load function is invoked. \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#ifndef QSTRINGSERIALIZER_H\u003Cbr \/\u003E#define QSTRINGSERIALIZER_H\u003Cbr \/\u003E\u003Cbr \/\u003Enamespace boost {\u003Cbr \/\u003E    namespace serialization {\u003Cbr \/\u003E\u003Cbr \/\u003E        template\u0026lt;class Archive\u0026gt;\u003Cbr \/\u003E        void save( Archive \u0026amp; ar, const QString\u0026amp; qStringParam, const unsigned int )\u003Cbr \/\u003E        {\u003Cbr \/\u003E            \/\/ save class member variables\u003Cbr \/\u003E            std::string stdString = qStringParam.toStdString();\u003Cbr \/\u003E            ar \u0026amp; BOOST_SERIALIZATION_NVP(stdString);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        template\u0026lt;class Archive\u0026gt;\u003Cbr \/\u003E        void load( Archive \u0026amp; ar, QString\u0026amp; qStringParam, const unsigned int )\u003Cbr \/\u003E        {\u003Cbr \/\u003E            \/\/ load class member variables\u003Cbr \/\u003E            std::string stdString;\u003Cbr \/\u003E            ar \u0026amp; BOOST_SERIALIZATION_NVP(stdString);\u003Cbr \/\u003E            qStringParam = qStringParam.fromStdString(stdString);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        template\u0026lt;class Archive\u0026gt;\u003Cbr \/\u003E        void serialize(Archive \u0026amp; ar, QString \u0026amp; t, const unsigned int file_version)\u003Cbr \/\u003E        {\u003Cbr \/\u003E            split_free(ar, t, file_version);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E    } \/\/ namespace serialization\u003Cbr \/\u003E} \/\/ namespace boost\u003Cbr \/\u003E#endif \/\/ QSTRINGSERIALIZER_H\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003Emain method in \u003Cb\u003Emain.cpp\u003C\/b\u003E file contains two code blocks which are respectively used for serialization and deserialization of User object with QString instance variables or states. After reconstructing User object, QString instance variables name and surname are initialized with the original values as serialized. \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#include \u0026lt;boost\/archive\/xml_iarchive.hpp\u0026gt;\u003Cbr \/\u003E#include \u0026lt;boost\/archive\/xml_oarchive.hpp\u0026gt;\u003Cbr \/\u003E#include \u0026lt;boost\/serialization\/string.hpp\u0026gt;\u003Cbr \/\u003E#include \u0026lt;boost\/serialization\/nvp.hpp\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E#include \u0026lt;QString\u0026gt;\u003Cbr \/\u003E#include \u0026lt;fstream\u0026gt;\u003Cbr \/\u003E#include \u0026lt;iostream\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E#include \"User.h\"\u003Cbr \/\u003E#include \"QStringSerializer.h\"\u003Cbr \/\u003E\u003Cbr \/\u003Eusing namespace std;\u003Cbr \/\u003E\u003Cbr \/\u003Eint main()\u003Cbr \/\u003E{\u003Cbr \/\u003E        {\u003Cbr \/\u003E            \/\/ Initialize User object to serialize with data\u003Cbr \/\u003E            User user(\"userName\",\"userSurname\");\u003Cbr \/\u003E            std::ofstream ofs(\"stateInfoFile.xml\");\u003Cbr \/\u003E            boost::archive::xml_oarchive oa(ofs);\u003Cbr \/\u003E            \/\/ write class instance to archive\u003Cbr \/\u003E            oa \u0026amp; BOOST_SERIALIZATION_NVP(user);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        {\u003Cbr \/\u003E            User user;\u003Cbr \/\u003E            std::ifstream ifs(\"stateInfoFile.xml\");\u003Cbr \/\u003E            boost::archive::xml_iarchive ia(ifs);\u003Cbr \/\u003E            \/\/ read class instance back from archive\u003Cbr \/\u003E            ia \u0026amp; BOOST_SERIALIZATION_NVP(user);\u003Cbr \/\u003E\u003Cbr \/\u003E            std::cout \u0026lt;\u0026lt; \"Name : \" \u0026lt;\u0026lt; user.getName().toStdString() \u0026lt;\u0026lt; std::endl;\u003Cbr \/\u003E            std::cout \u0026lt;\u0026lt; \"Surname : \" \u0026lt;\u0026lt; user.getSurname().toStdString() \u0026lt;\u0026lt; std::endl;\u003Cbr \/\u003E        }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cbr \/\u003EUser object state is saved into stateInfoFile.xml file and loaded back from the same xml file again for object reconstruction. stateInfoFile.xml file is an xml file and its content is as follows : \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-IpVsiMkNWbc\/VRXVb00d4eI\/AAAAAAAAARg\/DK6Vosrddhs\/s1600\/stateInfoXML.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"128\" src=\"http:\/\/2.bp.blogspot.com\/-IpVsiMkNWbc\/VRXVb00d4eI\/AAAAAAAAARg\/DK6Vosrddhs\/s1600\/stateInfoXML.png\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/tufangorel.blogspot.com\/feeds\/5201480756921000461\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/2015\/03\/serialize-c-object-with-qstring.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/5201480756921000461"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/5201480756921000461"},{"rel":"alternate","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/2015\/03\/serialize-c-object-with-qstring.html","title":"Serialize C++ Object with QString Instance Variables"}],"author":[{"name":{"$t":"Tufan Görel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/02308107478813024690"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"31","src":"http:\/\/1.bp.blogspot.com\/-8C4zN2V2Zoc\/VhgpZJnyTzI\/AAAAAAAAAdA\/dmkwYsYWV00\/s220\/profile_photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/1.bp.blogspot.com\/-5D-QjIzMy3I\/VRXOvPgO2fI\/AAAAAAAAARQ\/ohAJxOHRdQA\/s72-c\/project.png","height":"72","width":"72"},"thr$total":{"$t":"0"}},{"id":{"$t":"tag:blogger.com,1999:blog-1629739459234463496.post-8024459711921568962"},"published":{"$t":"2014-08-13T23:00:00.005+03:00"},"updated":{"$t":"2015-11-11T16:05:07.559+02:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Boost"},{"scheme":"http://www.blogger.com/atom/ns#","term":"cplusplus"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Qt"}],"title":{"type":"text","$t":"boost::array of std::string items in Qt Creator"},"content":{"type":"html","$t":"\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E\u003Ca href=\"http:\/\/www.boost.org\/doc\/libs\/1_55_0\/doc\/html\/array.html\" target=\"_blank\"\u003Eboost::array\u003C\/a\u003E is a template class which enables it to be able to be declared for different type of items. There exists an array as a member inside boost:array template class declaration so boost:array also acts a C-array wrapper with fixed number of items inside it.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003EFollowing sample project created by qt creator and contains following files:\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E1- BoostArrayOfStrings.pro\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E2- main.cpp\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-0twBVOh9XlA\/U-vBm8EC2RI\/AAAAAAAAAPQ\/kA23K-cD5qM\/s1600\/boost_array_of_strings.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-0twBVOh9XlA\/U-vBm8EC2RI\/AAAAAAAAAPQ\/kA23K-cD5qM\/s1600\/boost_array_of_strings.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E\u003Cb\u003EBoostArrayOfStrings\u003C\/b\u003E\u003C\/span\u003E\u003Cb style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E.pro\u003C\/b\u003E\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E\u0026nbsp;file contains project configuration.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003ETEMPLATE = app\u003Cbr \/\u003ECONFIG += console\u003Cbr \/\u003E\u003Cbr \/\u003ESOURCES += main.cpp\u003Cbr \/\u003E\u003Cbr \/\u003EINCLUDEPATH += \/home\/tufan\/boost_1_55_0\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/pre\u003EBoost header files and libraries are located under the directory : \/home\/tufan\/boost_1_55_0\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cb style=\"font-family: Arial, Helvetica, sans-serif;\"\u003Emain.cpp\u003C\/b\u003E\u003Cspan style=\"font-family: Arial, Helvetica, sans-serif;\"\u003E\u0026nbsp;file contains main method.\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"brush:cpp\" name=\"code\"\u003E#include \u0026lt;boost\/array.hpp\u0026gt;\u003Cbr \/\u003E#include \u0026lt;string.h\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003Eusing namespace std;\u003Cbr \/\u003E\u003Cbr \/\u003Eint main()\u003Cbr \/\u003E{\u003Cbr \/\u003E    typedef boost::array\u0026lt;string,3\u0026gt; boostArray;\u003Cbr \/\u003E    boostArray stringArray;\u003Cbr \/\u003E\u003Cbr \/\u003E    stringArray[0] = \"FirstStringMember\";\u003Cbr \/\u003E    stringArray.at(1) = \"SecondStringMember\";\u003Cbr \/\u003E    stringArray.at(2) = \"ThirdStringMember\";\u003Cbr \/\u003E\u003Cbr \/\u003E    \/\/ some common container operations\u003Cbr \/\u003E    cout \u0026lt;\u0026lt; \"size:     \" \u0026lt;\u0026lt; stringArray.size() \u0026lt;\u0026lt; endl;\u003Cbr \/\u003E    cout \u0026lt;\u0026lt; \"empty:    \" \u0026lt;\u0026lt; boolalpha \u0026lt;\u0026lt; stringArray.empty() \u0026lt;\u0026lt; endl;\u003Cbr \/\u003E    cout \u0026lt;\u0026lt; \"front:    \" \u0026lt;\u0026lt; stringArray.front() \u0026lt;\u0026lt; endl;\u003Cbr \/\u003E    cout \u0026lt;\u0026lt; \"back:     \" \u0026lt;\u0026lt; stringArray.back() \u0026lt;\u0026lt; endl;\u003Cbr \/\u003E    cout \u0026lt;\u0026lt; \"elements:    \" \u0026lt;\u0026lt; endl;\u003Cbr \/\u003E\u003Cbr \/\u003E    for(boostArray::iterator iter(stringArray.begin()); iter != stringArray.end(); ++iter)\u003Cbr \/\u003E    {\u003Cbr \/\u003E        cout \u0026lt;\u0026lt; *iter \u0026lt;\u0026lt; endl;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    return 0;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003Eboost array contains 3 string items. Members of the array are initialized by using array subscript operator and at() function.\u003Cbr \/\u003E\u003Cbr \/\u003Esize: \u0026nbsp; \u0026nbsp; 3\u003Cbr \/\u003Eempty: \u0026nbsp; \u0026nbsp;false\u003Cbr \/\u003Efront: \u0026nbsp; \u0026nbsp;FirstStringMember\u003Cbr \/\u003Eback: \u0026nbsp; \u0026nbsp; ThirdStringMember\u003Cbr \/\u003Eelements: \u0026nbsp; \u003Cbr \/\u003EFirstStringMember\u003Cbr \/\u003ESecondStringMember\u003Cbr \/\u003EThirdStringMember"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/tufangorel.blogspot.com\/feeds\/8024459711921568962\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/2014\/08\/boost-array-of-std-string-items-in-qt-creator.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/8024459711921568962"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/1629739459234463496\/posts\/default\/8024459711921568962"},{"rel":"alternate","type":"text/html","href":"http:\/\/tufangorel.blogspot.com\/2014\/08\/boost-array-of-std-string-items-in-qt-creator.html","title":"boost::array of std::string items in Qt Creator"}],"author":[{"name":{"$t":"Tufan Görel"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/02308107478813024690"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"31","src":"http:\/\/1.bp.blogspot.com\/-8C4zN2V2Zoc\/VhgpZJnyTzI\/AAAAAAAAAdA\/dmkwYsYWV00\/s220\/profile_photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/4.bp.blogspot.com\/-0twBVOh9XlA\/U-vBm8EC2RI\/AAAAAAAAAPQ\/kA23K-cD5qM\/s72-c\/boost_array_of_strings.png","height":"72","width":"72"},"thr$total":{"$t":"0"}}]}});